#!/usr/bin/python

import json
import re
import os
import lockfile
from subprocess import call, Popen, PIPE, STDOUT
import zipfile
import boto
from boto.s3.key import Key


def latest_release(s3_bucket):
  releases = s3_bucket.list()
  latest_release_number = -1
  for key in releases:
    match = re.match(r'^release-([0-9]+)/', key.name)
    if match:
      release_number = int(match.group(1))
      if release_number > latest_release_number:
        latest_release_number = release_number

  return latest_release_number


def main():
  module = AnsibleModule(
    argument_spec = dict(
      project = dict(required = True),
      app = dict(required = True),
      bucket = dict(required = True),
      dest = dict(required = True)
    )
  )

  project = module.params['project']
  app = module.params['app']
  bucket = module.params['bucket']
  dest = module.params['dest']

  changed = False

  conn = boto.connect_s3()
  s3_bucket = conn.get_bucket(bucket)

  release_num = latest_release(s3_bucket)
  if release_num > 0:
    release_dir_name = 'release-%s' % release_num
    zip_file_name = app + '.zip'
    env_file_name = app + '-env.yaml'
    dest_folder_path = dest + '/%s/%s/%s' % (project, app, release_dir_name)
    dest_zip_file_path = dest_folder_path + '/' + zip_file_name
    ansible_env_file_path = dest_folder_path + '/deploy/env.yaml'

    # Create the app dir
    if not os.path.exists(dest_folder_path):
      os.makedirs(dest_folder_path)

    # Retrieve the app zip from S3
    if not os.path.exists(dest_zip_file_path):
      release_key = Key(s3_bucket)
      release_key.key = '%s/%s' % (release_dir_name, zip_file_name)
      release_key.get_contents_to_filename(dest_zip_file_path)

    # Unzip the app
    if not os.path.exists(dest_folder_path + '/deploy'):
      changed = True
      dest_zip = zipfile.ZipFile(dest_zip_file_path, 'r')
      dest_zip.extractall(dest_folder_path)
      dest_zip.close()

      # Create the vars_file for ansible
      if not os.path.exists(ansible_env_file_path):
        env_key = Key(s3_bucket)
        env_key.key = '%s/%s' % (release_dir_name, env_file_name)
        env_key.get_contents_to_filename(ansible_env_file_path)

      # Run the ansible deploy playbook for the app
      ansible_command_line = 'ansible-playbook -c local -e "app_home=\'%s\'" %s/deploy/deploy.yml' % (dest_folder_path, dest_folder_path)
      p = Popen(ansible_command_line, shell = True, stdin = PIPE, stdout = PIPE, stderr = PIPE, close_fds = True)
      p.wait()
      command_output = p.stdout.read()
      return_code = p.returncode
      if return_code != 0:
        module.fail_json(msg = "Ansible deploy playbook returned " + return_code + '\n' + command_output)

  module.exit_json(changed = changed)


# include magic from lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

lock = lockfile.FileLock('/var/run/zerobot-deploy')
if not lock.is_locked():
  with lock:
    main()
